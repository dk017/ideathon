// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  department    String?
  bio           String?
  createdAt     DateTime  @default(now()) @map("created_at")

  // Auth relations
  accounts      Account[]
  sessions      Session[]

  // Application relations
  skills        UserSkill[]
  ideasOwned    Idea[]         @relation("Owner")
  memberships   IdeaMember[]
  joinRequests  JoinRequest[]
  kanbanCards   KanbanCard[]   @relation("Assignee")

  @@map("users")
}

// Auth models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Skills and User Skills
model Skill {
  id       String      @id @default(cuid())
  name     String      @unique
  users    UserSkill[]
  neededBy IdeaSkillNeeded[]

  @@map("skills")
}

model UserSkill {
  userId String
  skillId String
  level  SkillLevel @default(BEGINNER)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_skills")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

// Ideas and related models
model Idea {
  id          String          @id @default(cuid())
  title       String
  description String
  ownerId     String          @map("owner_id")
  status      IdeaStatus      @default(PITCH)
  createdAt   DateTime        @default(now()) @map("created_at")

  owner        User              @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  skillsNeeded IdeaSkillNeeded[]
  members      IdeaMember[]
  joinRequests JoinRequest[]
  kanbanCards  KanbanCard[]

  @@index([ownerId])
  @@map("ideas")
}

enum IdeaStatus {
  PITCH
  ACTIVE
  COMPLETED
  ARCHIVED
}

model IdeaSkillNeeded {
  ideaId  String
  skillId String
  level   SkillLevel?

  idea  Idea  @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([ideaId, skillId])
  @@map("idea_skills_needed")
}

model IdeaMember {
  ideaId String
  userId String
  role   MemberRole @default(CONTRIBUTOR)
  joinedAt DateTime @default(now()) @map("joined_at")

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([ideaId, userId])
  @@map("idea_members")
}

enum MemberRole {
  OWNER
  CONTRIBUTOR
}

model JoinRequest {
  id        String        @id @default(cuid())
  ideaId    String        @map("idea_id")
  userId    String        @map("user_id")
  message   String?
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now()) @map("created_at")

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ideaId, userId])
  @@map("join_requests")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Kanban board models
model KanbanCard {
  id          String       @id @default(cuid())
  ideaId      String       @map("idea_id")
  assigneeId  String?      @map("assignee_id")
  title       String
  description String?
  column      KanbanColumn @default(BACKLOG)
  order       Int          @default(0)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  idea     Idea  @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  assignee User? @relation("Assignee", fields: [assigneeId], references: [id])

  @@index([ideaId, column])
  @@map("kanban_cards")
}

enum KanbanColumn {
  BACKLOG
  IN_PROGRESS
  DONE
}